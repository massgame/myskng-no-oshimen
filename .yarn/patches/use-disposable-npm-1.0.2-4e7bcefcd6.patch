diff --git a/lib/index.cjs b/lib/index.cjs
index 16be5a1aeb8e1af659522601ae198dfc55b863c5..664d30781a9c8b250213051f1d70756e0508756e 100644
--- a/lib/index.cjs
+++ b/lib/index.cjs
@@ -33,7 +33,21 @@ module.exports = __toCommonJS(src_exports);
 
 // src/useIsStrictMode.ts
 var React = __toESM(require("react"), 1);
-var getCurrentOwner = () => React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner.current;
+var getCurrentOwner = () => {
+  try {
+    return React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE.A.getOwner();
+  } catch {
+  }
+  try {
+    return React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner.current;
+  } catch {
+    if (process.env.NODE_ENV !== "production") {
+      console.error(
+        "use-disposable: failed to get current fiber, please report this bug to maintainers"
+      );
+    }
+  }
+};
 var REACT_STRICT_MODE_TYPE = /* @__PURE__ */ Symbol.for("react.strict_mode");
 var useIsStrictMode = () => {
   if (process.env.NODE_ENV === "production") {
@@ -111,4 +125,4 @@ function useDisposable(factory, deps) {
   useDisposable,
   useIsStrictMode
 });
-//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL2luZGV4LnRzIiwgIi4uL3NyYy91c2VJc1N0cmljdE1vZGUudHMiLCAiLi4vc3JjL3VzZURpc3Bvc2FibGUudHMiLCAiLi4vc3JjL3VzZVN0cmljdEVmZmVjdC50cyIsICIuLi9zcmMvdXNlU3RyaWN0TWVtby50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiZXhwb3J0IHsgdXNlSXNTdHJpY3RNb2RlIH0gZnJvbSBcIi4vdXNlSXNTdHJpY3RNb2RlXCI7XG5leHBvcnQgeyB1c2VEaXNwb3NhYmxlIH0gZnJvbSBcIi4vdXNlRGlzcG9zYWJsZVwiO1xuZXhwb3J0IHR5cGUgeyBEaXNwb3NhYmxlRmFjdG9yeSB9IGZyb20gXCIuL3R5cGVzXCI7XG4iLCAiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbi8qKlxuICogQHJldHVybnMgQ3VycmVudCByZWFjdCBmaWJlciBiZWluZyByZW5kZXJlZFxuICovXG5leHBvcnQgY29uc3QgZ2V0Q3VycmVudE93bmVyID0gKCkgPT5cbiAgLy8gQHRzLWlnbm9yZSAtIHVzaW5nIHJlYWN0IGludGVybmFsc1xuICBSZWFjdC5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRC5SZWFjdEN1cnJlbnRPd25lclxuICAgIC5jdXJyZW50O1xuXG5jb25zdCBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gLyojX19QVVJFX18qLyBTeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik7XG5cbi8qKlxuICogVHJhdmVyc2VzIHVwIHRoZSBSZWFjdCBmaWJlciB0cmVlIHRvIGZpbmQgdGhlIFN0cmljdE1vZGUgY29tcG9uZW50LlxuICogTm90ZTogVGhpcyBvbmx5IGRldGVjdHMgc3RyaWN0IG1vZGUgZnJvbSBSZWFjdCA+PSAxOFxuICogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0d2cvcmVhY3QtMTgvZGlzY3Vzc2lvbnMvMTlcbiAqIEByZXR1cm5zIElmIHN0cmljdCBtb2RlIGlzIGJlaW5nIHVzZWQgaW4gdGhlIFJlYWN0IHRyZWVcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZUlzU3RyaWN0TW9kZSA9ICgpOiBib29sZWFuID0+IHtcbiAgLy8gVGhpcyBjaGVjayB2aW9sYXRlcyBSdWxlcyBvZiBIb29rcywgYnV0IFwicHJvY2Vzcy5lbnYuTk9ERV9FTlZcIiBkb2VzIG5vdCBjaGFuZ2UgaW4gYnVuZGxlXG4gIC8vIG9yIGR1cmluZyBhcHBsaWNhdGlvbiBsaWZlY3ljbGVcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IGlzU3RyaWN0TW9kZSA9IFJlYWN0LnVzZVJlZjxib29sZWFuIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuICBjb25zdCByZWFjdE1ham9yVmVyc2lvbiA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiBOdW1iZXIoUmVhY3QudmVyc2lvbi5zcGxpdChcIi5cIilbMF0pO1xuICB9LCBbUmVhY3QudmVyc2lvbl0pO1xuXG4gIGlmIChpc05hTihyZWFjdE1ham9yVmVyc2lvbikgfHwgcmVhY3RNYWpvclZlcnNpb24gPCAxOCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChpc1N0cmljdE1vZGUuY3VycmVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IGN1cnJlbnRPd25lciA9IGdldEN1cnJlbnRPd25lcigpO1xuICAgIHdoaWxlIChjdXJyZW50T3duZXIgJiYgY3VycmVudE93bmVyLnJldHVybikge1xuICAgICAgY3VycmVudE93bmVyID0gY3VycmVudE93bmVyLnJldHVybjtcbiAgICAgIGlmIChcbiAgICAgICAgY3VycmVudE93bmVyLnR5cGUgPT09IFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgfHxcbiAgICAgICAgY3VycmVudE93bmVyLmVsZW1lbnRUeXBlID09PSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFXG4gICAgICApIHtcbiAgICAgICAgaXNTdHJpY3RNb2RlLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAhIWlzU3RyaWN0TW9kZS5jdXJyZW50O1xufTtcbiIsICJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB0eXBlIHsgRGlzcG9zYWJsZUZhY3RvcnkgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgdXNlSXNTdHJpY3RNb2RlIH0gZnJvbSBcIi4vdXNlSXNTdHJpY3RNb2RlXCI7XG5pbXBvcnQgeyB1c2VTdHJpY3RFZmZlY3QgfSBmcm9tIFwiLi91c2VTdHJpY3RFZmZlY3RcIjtcbmltcG9ydCB7IHVzZVN0cmljdE1lbW8gfSBmcm9tIFwiLi91c2VTdHJpY3RNZW1vXCI7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGRpc3Bvc2FibGUgaW5zdGFuY2UgZHVyaW5nICoqcmVuZGVyIHRpbWUqKiB0aGF0IHdpbGxcbiAqIGJlIGNyZWF0ZWQgb25jZSAoYmFzZWQgb24gZGVwZW5kZW5jeSBhcnJheSkgZXZlbiBkdXJpbmcgc3RyaWN0IG1vZGUuXG4gKiBUaGUgZGlzcG9zYWJsZSB3aWxsIGJlIGRpc3Bvc2VkIGJhc2VkIG9uIHRoZSBkZXBlbmRlbmN5IGFycmF5IHNpbWlsYXIgdG9cbiAqIHVzZUVmZmVjdC5cbiAqXG4gKiBcdTI2QTBcdUZFMEYgVGhpcyBjYW4gb25seSBiZSBjYWxsZWQgKipvbmNlKiogcGVyIGNvbXBvbmVudFxuICogQHBhcmFtIGZhY3RvcnkgLSBmYWN0b3J5IGZvciBkaXNwb3NhYmxlIGFuZCBpdHMgZGlzcG9zZSBmdW5jdGlvblxuICogQHBhcmFtIGRlcHMgLSBTaW1pbGFyIHRvIGEgUmVhY3QgZGVwZW5kZW5jeSBhcnJheVxuICogQHJldHVybnMgLSBUaGUgZGlzcG9zYWJsZSBpbnN0YW5jZVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlRGlzcG9zYWJsZTxUSW5zdGFuY2U+KFxuICBmYWN0b3J5OiBEaXNwb3NhYmxlRmFjdG9yeTxUSW5zdGFuY2U+LFxuICBkZXBzOiBhbnlbXVxuKSB7XG4gIC8vIEluIHByb2R1Y3Rpb24sIHN0cmljdCBtb2RlIGRvZXMgbm90IHJlcXVpcmUgc3BlY2lhbCBoYW5kbGluZ1xuICBjb25zdCBpc1N0cmljdE1vZGUgPVxuICAgIHVzZUlzU3RyaWN0TW9kZSgpICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIjtcblxuICBjb25zdCB1c2VNZW1vID0gaXNTdHJpY3RNb2RlID8gdXNlU3RyaWN0TWVtbyA6IFJlYWN0LnVzZU1lbW87XG4gIGNvbnN0IHVzZUVmZmVjdCA9IGlzU3RyaWN0TW9kZSA/IHVzZVN0cmljdEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcblxuICBjb25zdCBbZGlzcG9zYWJsZSwgZGlzcG9zZV0gPSB1c2VNZW1vKCgpID0+IGZhY3RvcnkoKSwgZGVwcykgPz8gW1xuICAgIG51bGwsXG4gICAgKCkgPT4gbnVsbCxcbiAgXTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gZGlzcG9zZTtcbiAgfSwgZGVwcyk7XG5cbiAgcmV0dXJuIGRpc3Bvc2FibGU7XG59XG4iLCAiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBnZXRDdXJyZW50T3duZXIgfSBmcm9tIFwiLi91c2VJc1N0cmljdE1vZGVcIjtcblxuLy8gd2Uga25vdyBzdHJpY3QgbW9kZSB3aWxsIHJlbmRlciB1c2VNZW1vIGZhY29yeSB0d2ljZVxuLy8ga2VlcCBhIHdlYWsgc2V0IHRvIGRldGVjdCB3aGVuIHRoZSBzZWNvbmQgcmVuZGVyIGhhcHBlbnNcbmNvbnN0IGVmZmVjdFNldCA9IG5ldyBXZWFrU2V0KCk7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTdHJpY3RFZmZlY3QoXG4gIGVmZmVjdDogKCkgPT4gKCkgPT4gdm9pZCxcbiAgZGVwczogUmVhY3QuRGVwZW5kZW5jeUxpc3QgfCB1bmRlZmluZWRcbikge1xuICBjb25zdCBjdXJyZW50T3duZXIgPSBnZXRDdXJyZW50T3duZXIoKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWVmZmVjdFNldC5oYXMoY3VycmVudE93bmVyKSkge1xuICAgICAgZWZmZWN0U2V0LmFkZChjdXJyZW50T3duZXIpO1xuICAgICAgZWZmZWN0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZGlzcG9zZSA9IGVmZmVjdCgpO1xuICAgIHJldHVybiBkaXNwb3NlO1xuICB9LCBkZXBzKTtcbn1cbiIsICJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGdldEN1cnJlbnRPd25lciB9IGZyb20gXCIuL3VzZUlzU3RyaWN0TW9kZVwiO1xuXG4vLyB3ZSBrbm93IHN0cmljdCBtb2RlIHdpbGwgcmVuZGVyIHVzZU1lbW8gZmFjb3J5IHR3aWNlXG4vLyBrZWVwIGEgd2VhayBzZXQgdG8gZGV0ZWN0IHdoZW4gdGhlIHNlY29uZCByZW5kZXIgaGFwcGVuc1xuY29uc3QgbWVtb1NldCA9IG5ldyBXZWFrU2V0KCk7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTdHJpY3RNZW1vPFRNZW1vaXplZD4oXG4gIGZhY3Rvcnk6ICgpID0+IGFueSxcbiAgZGVwczogUmVhY3QuRGVwZW5kZW5jeUxpc3QgfCB1bmRlZmluZWRcbik6IFRNZW1vaXplZCB8IG51bGwge1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgY3VycmVudE93bmVyID0gZ2V0Q3VycmVudE93bmVyKCk7XG4gICAgaWYgKCFtZW1vU2V0LmhhcyhjdXJyZW50T3duZXIpKSB7XG4gICAgICBtZW1vU2V0LmFkZChjdXJyZW50T3duZXIpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhY3RvcnkoKTtcbiAgfSwgZGVwcyk7XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7O0FDQUEsWUFBdUI7QUFLaEIsSUFBTSxrQkFBa0IsTUFFdkIseURBQW1ELGtCQUN0RDtBQUVMLElBQU0seUJBQXVDLHVCQUFPLElBQUksbUJBQW1CO0FBUXBFLElBQU0sa0JBQWtCLE1BQWU7QUFHNUMsTUFBSSxRQUFRLElBQUksYUFBYSxjQUFjO0FBQ3pDLFdBQU87QUFBQSxFQUNUO0FBRUEsUUFBTSxlQUFxQixhQUE0QixNQUFTO0FBQ2hFLFFBQU0sb0JBQTBCLGNBQVEsTUFBTTtBQUM1QyxXQUFPLE9BQWEsY0FBUSxNQUFNLEdBQUcsRUFBRSxFQUFFO0FBQUEsRUFDM0MsR0FBRyxDQUFPLGFBQU8sQ0FBQztBQUVsQixNQUFJLE1BQU0saUJBQWlCLEtBQUssb0JBQW9CLElBQUk7QUFDdEQsV0FBTztBQUFBLEVBQ1Q7QUFFQSxNQUFJLGFBQWEsWUFBWSxRQUFXO0FBQ3RDLFFBQUksZUFBZSxnQkFBZ0I7QUFDbkMsV0FBTyxnQkFBZ0IsYUFBYSxRQUFRO0FBQzFDLHFCQUFlLGFBQWE7QUFDNUIsVUFDRSxhQUFhLFNBQVMsMEJBQ3RCLGFBQWEsZ0JBQWdCLHdCQUM3QjtBQUNBLHFCQUFhLFVBQVU7QUFBQSxNQUN6QjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBRUEsU0FBTyxDQUFDLENBQUMsYUFBYTtBQUN4Qjs7O0FDaERBLElBQUFBLFNBQXVCOzs7QUNBdkIsSUFBQUMsU0FBdUI7QUFLdkIsSUFBTSxZQUFZLG9CQUFJLFFBQVE7QUFFdkIsU0FBUyxnQkFDZCxRQUNBLE1BQ0E7QUFDQSxRQUFNLGVBQWUsZ0JBQWdCO0FBQ3JDLEVBQU0saUJBQVUsTUFBTTtBQUNwQixRQUFJLENBQUMsVUFBVSxJQUFJLFlBQVksR0FBRztBQUNoQyxnQkFBVSxJQUFJLFlBQVk7QUFDMUIsYUFBTztBQUNQO0FBQUEsSUFDRjtBQUVBLFVBQU0sVUFBVSxPQUFPO0FBQ3ZCLFdBQU87QUFBQSxFQUNULEdBQUcsSUFBSTtBQUNUOzs7QUN0QkEsSUFBQUMsU0FBdUI7QUFLdkIsSUFBTSxVQUFVLG9CQUFJLFFBQVE7QUFFckIsU0FBUyxjQUNkLFNBQ0EsTUFDa0I7QUFDbEIsU0FBYSxlQUFRLE1BQU07QUFDekIsVUFBTSxlQUFlLGdCQUFnQjtBQUNyQyxRQUFJLENBQUMsUUFBUSxJQUFJLFlBQVksR0FBRztBQUM5QixjQUFRLElBQUksWUFBWTtBQUN4QixhQUFPO0FBQUEsSUFDVDtBQUVBLFdBQU8sUUFBUTtBQUFBLEVBQ2pCLEdBQUcsSUFBSTtBQUNUOzs7QUZITyxTQUFTLGNBQ2QsU0FDQSxNQUNBO0FBcEJGO0FBc0JFLFFBQU0sZUFDSixnQkFBZ0IsS0FBSyxRQUFRLElBQUksYUFBYTtBQUVoRCxRQUFNQyxXQUFVLGVBQWUsZ0JBQXNCO0FBQ3JELFFBQU1DLGFBQVksZUFBZSxrQkFBd0I7QUFFekQsUUFBTSxDQUFDLFlBQVksT0FBTyxLQUFJLEtBQUFELFNBQVEsTUFBTSxRQUFRLEdBQUcsSUFBSSxNQUE3QixZQUFrQztBQUFBLElBQzlEO0FBQUEsSUFDQSxNQUFNO0FBQUEsRUFDUjtBQUNBLEVBQUFDLFdBQVUsTUFBTTtBQUNkLFdBQU87QUFBQSxFQUNULEdBQUcsSUFBSTtBQUVQLFNBQU87QUFDVDsiLAogICJuYW1lcyI6IFsiUmVhY3QiLCAiUmVhY3QiLCAiUmVhY3QiLCAidXNlTWVtbyIsICJ1c2VFZmZlY3QiXQp9Cg==
\ No newline at end of file
+//# sourceMappingURL=data:application/json;base64,
\ No newline at end of file
diff --git a/lib/index.js b/lib/index.js
index eeac77c2f89a4f11bc7e0b8089979f8c4c9addbb..b75a68c33ffba86bb347b14b5dd7ae244c12cece 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -1,6 +1,20 @@
 // src/useIsStrictMode.ts
 import * as React from "react";
-var getCurrentOwner = () => React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner.current;
+var getCurrentOwner = () => {
+  try {
+    return React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE.A.getOwner();
+  } catch {
+  }
+  try {
+    return React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner.current;
+  } catch {
+    if (process.env.NODE_ENV !== "production") {
+      console.error(
+        "use-disposable: failed to get current fiber, please report this bug to maintainers"
+      );
+    }
+  }
+};
 var REACT_STRICT_MODE_TYPE = /* @__PURE__ */ Symbol.for("react.strict_mode");
 var useIsStrictMode = () => {
   if (process.env.NODE_ENV === "production") {
@@ -77,4 +91,4 @@ export {
   useDisposable,
   useIsStrictMode
 };
-//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL3VzZUlzU3RyaWN0TW9kZS50cyIsICIuLi9zcmMvdXNlRGlzcG9zYWJsZS50cyIsICIuLi9zcmMvdXNlU3RyaWN0RWZmZWN0LnRzIiwgIi4uL3NyYy91c2VTdHJpY3RNZW1vLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuLyoqXG4gKiBAcmV0dXJucyBDdXJyZW50IHJlYWN0IGZpYmVyIGJlaW5nIHJlbmRlcmVkXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRDdXJyZW50T3duZXIgPSAoKSA9PlxuICAvLyBAdHMtaWdub3JlIC0gdXNpbmcgcmVhY3QgaW50ZXJuYWxzXG4gIFJlYWN0Ll9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyXG4gICAgLmN1cnJlbnQ7XG5cbmNvbnN0IFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgPSAvKiNfX1BVUkVfXyovIFN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTtcblxuLyoqXG4gKiBUcmF2ZXJzZXMgdXAgdGhlIFJlYWN0IGZpYmVyIHRyZWUgdG8gZmluZCB0aGUgU3RyaWN0TW9kZSBjb21wb25lbnQuXG4gKiBOb3RlOiBUaGlzIG9ubHkgZGV0ZWN0cyBzdHJpY3QgbW9kZSBmcm9tIFJlYWN0ID49IDE4XG4gKiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3R3Zy9yZWFjdC0xOC9kaXNjdXNzaW9ucy8xOVxuICogQHJldHVybnMgSWYgc3RyaWN0IG1vZGUgaXMgYmVpbmcgdXNlZCBpbiB0aGUgUmVhY3QgdHJlZVxuICovXG5leHBvcnQgY29uc3QgdXNlSXNTdHJpY3RNb2RlID0gKCk6IGJvb2xlYW4gPT4ge1xuICAvLyBUaGlzIGNoZWNrIHZpb2xhdGVzIFJ1bGVzIG9mIEhvb2tzLCBidXQgXCJwcm9jZXNzLmVudi5OT0RFX0VOVlwiIGRvZXMgbm90IGNoYW5nZSBpbiBidW5kbGVcbiAgLy8gb3IgZHVyaW5nIGFwcGxpY2F0aW9uIGxpZmVjeWNsZVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgaXNTdHJpY3RNb2RlID0gUmVhY3QudXNlUmVmPGJvb2xlYW4gfCB1bmRlZmluZWQ+KHVuZGVmaW5lZCk7XG4gIGNvbnN0IHJlYWN0TWFqb3JWZXJzaW9uID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIE51bWJlcihSZWFjdC52ZXJzaW9uLnNwbGl0KFwiLlwiKVswXSk7XG4gIH0sIFtSZWFjdC52ZXJzaW9uXSk7XG5cbiAgaWYgKGlzTmFOKHJlYWN0TWFqb3JWZXJzaW9uKSB8fCByZWFjdE1ham9yVmVyc2lvbiA8IDE4KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGlzU3RyaWN0TW9kZS5jdXJyZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICBsZXQgY3VycmVudE93bmVyID0gZ2V0Q3VycmVudE93bmVyKCk7XG4gICAgd2hpbGUgKGN1cnJlbnRPd25lciAmJiBjdXJyZW50T3duZXIucmV0dXJuKSB7XG4gICAgICBjdXJyZW50T3duZXIgPSBjdXJyZW50T3duZXIucmV0dXJuO1xuICAgICAgaWYgKFxuICAgICAgICBjdXJyZW50T3duZXIudHlwZSA9PT0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRSB8fFxuICAgICAgICBjdXJyZW50T3duZXIuZWxlbWVudFR5cGUgPT09IFJFQUNUX1NUUklDVF9NT0RFX1RZUEVcbiAgICAgICkge1xuICAgICAgICBpc1N0cmljdE1vZGUuY3VycmVudCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICEhaXNTdHJpY3RNb2RlLmN1cnJlbnQ7XG59O1xuIiwgImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHR5cGUgeyBEaXNwb3NhYmxlRmFjdG9yeSB9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQgeyB1c2VJc1N0cmljdE1vZGUgfSBmcm9tIFwiLi91c2VJc1N0cmljdE1vZGVcIjtcbmltcG9ydCB7IHVzZVN0cmljdEVmZmVjdCB9IGZyb20gXCIuL3VzZVN0cmljdEVmZmVjdFwiO1xuaW1wb3J0IHsgdXNlU3RyaWN0TWVtbyB9IGZyb20gXCIuL3VzZVN0cmljdE1lbW9cIjtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZGlzcG9zYWJsZSBpbnN0YW5jZSBkdXJpbmcgKipyZW5kZXIgdGltZSoqIHRoYXQgd2lsbFxuICogYmUgY3JlYXRlZCBvbmNlIChiYXNlZCBvbiBkZXBlbmRlbmN5IGFycmF5KSBldmVuIGR1cmluZyBzdHJpY3QgbW9kZS5cbiAqIFRoZSBkaXNwb3NhYmxlIHdpbGwgYmUgZGlzcG9zZWQgYmFzZWQgb24gdGhlIGRlcGVuZGVuY3kgYXJyYXkgc2ltaWxhciB0b1xuICogdXNlRWZmZWN0LlxuICpcbiAqIFx1MjZBMFx1RkUwRiBUaGlzIGNhbiBvbmx5IGJlIGNhbGxlZCAqKm9uY2UqKiBwZXIgY29tcG9uZW50XG4gKiBAcGFyYW0gZmFjdG9yeSAtIGZhY3RvcnkgZm9yIGRpc3Bvc2FibGUgYW5kIGl0cyBkaXNwb3NlIGZ1bmN0aW9uXG4gKiBAcGFyYW0gZGVwcyAtIFNpbWlsYXIgdG8gYSBSZWFjdCBkZXBlbmRlbmN5IGFycmF5XG4gKiBAcmV0dXJucyAtIFRoZSBkaXNwb3NhYmxlIGluc3RhbmNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VEaXNwb3NhYmxlPFRJbnN0YW5jZT4oXG4gIGZhY3Rvcnk6IERpc3Bvc2FibGVGYWN0b3J5PFRJbnN0YW5jZT4sXG4gIGRlcHM6IGFueVtdXG4pIHtcbiAgLy8gSW4gcHJvZHVjdGlvbiwgc3RyaWN0IG1vZGUgZG9lcyBub3QgcmVxdWlyZSBzcGVjaWFsIGhhbmRsaW5nXG4gIGNvbnN0IGlzU3RyaWN0TW9kZSA9XG4gICAgdXNlSXNTdHJpY3RNb2RlKCkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiO1xuXG4gIGNvbnN0IHVzZU1lbW8gPSBpc1N0cmljdE1vZGUgPyB1c2VTdHJpY3RNZW1vIDogUmVhY3QudXNlTWVtbztcbiAgY29uc3QgdXNlRWZmZWN0ID0gaXNTdHJpY3RNb2RlID8gdXNlU3RyaWN0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xuXG4gIGNvbnN0IFtkaXNwb3NhYmxlLCBkaXNwb3NlXSA9IHVzZU1lbW8oKCkgPT4gZmFjdG9yeSgpLCBkZXBzKSA/PyBbXG4gICAgbnVsbCxcbiAgICAoKSA9PiBudWxsLFxuICBdO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiBkaXNwb3NlO1xuICB9LCBkZXBzKTtcblxuICByZXR1cm4gZGlzcG9zYWJsZTtcbn1cbiIsICJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGdldEN1cnJlbnRPd25lciB9IGZyb20gXCIuL3VzZUlzU3RyaWN0TW9kZVwiO1xuXG4vLyB3ZSBrbm93IHN0cmljdCBtb2RlIHdpbGwgcmVuZGVyIHVzZU1lbW8gZmFjb3J5IHR3aWNlXG4vLyBrZWVwIGEgd2VhayBzZXQgdG8gZGV0ZWN0IHdoZW4gdGhlIHNlY29uZCByZW5kZXIgaGFwcGVuc1xuY29uc3QgZWZmZWN0U2V0ID0gbmV3IFdlYWtTZXQoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVN0cmljdEVmZmVjdChcbiAgZWZmZWN0OiAoKSA9PiAoKSA9PiB2b2lkLFxuICBkZXBzOiBSZWFjdC5EZXBlbmRlbmN5TGlzdCB8IHVuZGVmaW5lZFxuKSB7XG4gIGNvbnN0IGN1cnJlbnRPd25lciA9IGdldEN1cnJlbnRPd25lcigpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghZWZmZWN0U2V0LmhhcyhjdXJyZW50T3duZXIpKSB7XG4gICAgICBlZmZlY3RTZXQuYWRkKGN1cnJlbnRPd25lcik7XG4gICAgICBlZmZlY3QoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBkaXNwb3NlID0gZWZmZWN0KCk7XG4gICAgcmV0dXJuIGRpc3Bvc2U7XG4gIH0sIGRlcHMpO1xufVxuIiwgImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgZ2V0Q3VycmVudE93bmVyIH0gZnJvbSBcIi4vdXNlSXNTdHJpY3RNb2RlXCI7XG5cbi8vIHdlIGtub3cgc3RyaWN0IG1vZGUgd2lsbCByZW5kZXIgdXNlTWVtbyBmYWNvcnkgdHdpY2Vcbi8vIGtlZXAgYSB3ZWFrIHNldCB0byBkZXRlY3Qgd2hlbiB0aGUgc2Vjb25kIHJlbmRlciBoYXBwZW5zXG5jb25zdCBtZW1vU2V0ID0gbmV3IFdlYWtTZXQoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVN0cmljdE1lbW88VE1lbW9pemVkPihcbiAgZmFjdG9yeTogKCkgPT4gYW55LFxuICBkZXBzOiBSZWFjdC5EZXBlbmRlbmN5TGlzdCB8IHVuZGVmaW5lZFxuKTogVE1lbW9pemVkIHwgbnVsbCB7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCBjdXJyZW50T3duZXIgPSBnZXRDdXJyZW50T3duZXIoKTtcbiAgICBpZiAoIW1lbW9TZXQuaGFzKGN1cnJlbnRPd25lcikpIHtcbiAgICAgIG1lbW9TZXQuYWRkKGN1cnJlbnRPd25lcik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFjdG9yeSgpO1xuICB9LCBkZXBzKTtcbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBQSxZQUFZLFdBQVc7QUFLaEIsSUFBTSxrQkFBa0IsTUFFdkIseURBQW1ELGtCQUN0RDtBQUVMLElBQU0seUJBQXVDLHVCQUFPLElBQUksbUJBQW1CO0FBUXBFLElBQU0sa0JBQWtCLE1BQWU7QUFHNUMsTUFBSSxRQUFRLElBQUksYUFBYSxjQUFjO0FBQ3pDLFdBQU87QUFBQSxFQUNUO0FBRUEsUUFBTSxlQUFxQixhQUE0QixNQUFTO0FBQ2hFLFFBQU0sb0JBQTBCLGNBQVEsTUFBTTtBQUM1QyxXQUFPLE9BQWEsY0FBUSxNQUFNLEdBQUcsRUFBRSxFQUFFO0FBQUEsRUFDM0MsR0FBRyxDQUFPLGFBQU8sQ0FBQztBQUVsQixNQUFJLE1BQU0saUJBQWlCLEtBQUssb0JBQW9CLElBQUk7QUFDdEQsV0FBTztBQUFBLEVBQ1Q7QUFFQSxNQUFJLGFBQWEsWUFBWSxRQUFXO0FBQ3RDLFFBQUksZUFBZSxnQkFBZ0I7QUFDbkMsV0FBTyxnQkFBZ0IsYUFBYSxRQUFRO0FBQzFDLHFCQUFlLGFBQWE7QUFDNUIsVUFDRSxhQUFhLFNBQVMsMEJBQ3RCLGFBQWEsZ0JBQWdCLHdCQUM3QjtBQUNBLHFCQUFhLFVBQVU7QUFBQSxNQUN6QjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBRUEsU0FBTyxDQUFDLENBQUMsYUFBYTtBQUN4Qjs7O0FDaERBLFlBQVlBLFlBQVc7OztBQ0F2QixZQUFZQyxZQUFXO0FBS3ZCLElBQU0sWUFBWSxvQkFBSSxRQUFRO0FBRXZCLFNBQVMsZ0JBQ2QsUUFDQSxNQUNBO0FBQ0EsUUFBTSxlQUFlLGdCQUFnQjtBQUNyQyxFQUFNLGlCQUFVLE1BQU07QUFDcEIsUUFBSSxDQUFDLFVBQVUsSUFBSSxZQUFZLEdBQUc7QUFDaEMsZ0JBQVUsSUFBSSxZQUFZO0FBQzFCLGFBQU87QUFDUDtBQUFBLElBQ0Y7QUFFQSxVQUFNLFVBQVUsT0FBTztBQUN2QixXQUFPO0FBQUEsRUFDVCxHQUFHLElBQUk7QUFDVDs7O0FDdEJBLFlBQVlDLFlBQVc7QUFLdkIsSUFBTSxVQUFVLG9CQUFJLFFBQVE7QUFFckIsU0FBUyxjQUNkLFNBQ0EsTUFDa0I7QUFDbEIsU0FBYSxlQUFRLE1BQU07QUFDekIsVUFBTSxlQUFlLGdCQUFnQjtBQUNyQyxRQUFJLENBQUMsUUFBUSxJQUFJLFlBQVksR0FBRztBQUM5QixjQUFRLElBQUksWUFBWTtBQUN4QixhQUFPO0FBQUEsSUFDVDtBQUVBLFdBQU8sUUFBUTtBQUFBLEVBQ2pCLEdBQUcsSUFBSTtBQUNUOzs7QUZITyxTQUFTLGNBQ2QsU0FDQSxNQUNBO0FBcEJGO0FBc0JFLFFBQU0sZUFDSixnQkFBZ0IsS0FBSyxRQUFRLElBQUksYUFBYTtBQUVoRCxRQUFNQyxXQUFVLGVBQWUsZ0JBQXNCO0FBQ3JELFFBQU1DLGFBQVksZUFBZSxrQkFBd0I7QUFFekQsUUFBTSxDQUFDLFlBQVksT0FBTyxLQUFJLEtBQUFELFNBQVEsTUFBTSxRQUFRLEdBQUcsSUFBSSxNQUE3QixZQUFrQztBQUFBLElBQzlEO0FBQUEsSUFDQSxNQUFNO0FBQUEsRUFDUjtBQUNBLEVBQUFDLFdBQVUsTUFBTTtBQUNkLFdBQU87QUFBQSxFQUNULEdBQUcsSUFBSTtBQUVQLFNBQU87QUFDVDsiLAogICJuYW1lcyI6IFsiUmVhY3QiLCAiUmVhY3QiLCAiUmVhY3QiLCAidXNlTWVtbyIsICJ1c2VFZmZlY3QiXQp9Cg==
\ No newline at end of file
+//# sourceMappingURL=data:application/json;base64,
\ No newline at end of file
